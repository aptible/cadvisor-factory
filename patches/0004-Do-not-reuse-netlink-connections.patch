diff --git a/utils/cpuload/netlink/conn.go b/utils/cpuload/netlink/conn.go
index 7eb2204..5b1a58f 100644
--- a/utils/cpuload/netlink/conn.go
+++ b/utils/cpuload/netlink/conn.go
@@ -20,6 +20,9 @@ import (
 	"encoding/binary"
 	"os"
 	"syscall"
+	"errors"
+
+	"github.com/golang/glog"
 )
 
 type Connection struct {
@@ -52,6 +55,8 @@ func newConnection() (*Connection, error) {
 		syscall.Close(fd)
 		return nil, err
 	}
+
+	glog.V(4).Infof("New Netlink connection: %+v", conn)
 	return conn, err
 }
 
@@ -89,6 +94,10 @@ func (self *Connection) ReadMessage() (msg syscall.NetlinkMessage, err error) {
 	if err != nil {
 		return msg, err
 	}
+	if msg.Header.Len == 0 {
+		glog.Errorf("Unexpected netlink header: %+v", msg.Header)
+		return msg, errors.New("Unexpected netlink header")
+	}
 	msg.Data = make([]byte, msg.Header.Len-syscall.NLMSG_HDRLEN)
 	_, err = self.rbuf.Read(msg.Data)
 	return msg, err
diff --git a/utils/cpuload/netlink/defs.go b/utils/cpuload/netlink/defs.go
index a45d870..cdb5517 100644
--- a/utils/cpuload/netlink/defs.go
+++ b/utils/cpuload/netlink/defs.go
@@ -15,12 +15,20 @@
 package netlink
 
 /*
+#include <linux/genetlink.h>
 #include <linux/taskstats.h>
+#include <linux/cgroupstats.h>
 */
 import "C"
 
-type TaskStats C.struct_taskstats
-
 const (
-	__TASKSTATS_CMD_MAX = C.__TASKSTATS_CMD_MAX
+	GENL_ID_CTRL = C.GENL_ID_CTRL
+	CTRL_ATTR_FAMILY_ID = C.CTRL_ATTR_FAMILY_ID
+	CTRL_ATTR_FAMILY_NAME = C.CTRL_ATTR_FAMILY_NAME
+	CTRL_CMD_GETFAMILY = C.CTRL_CMD_GETFAMILY
+	TASKSTATS_GENL_NAME = C.TASKSTATS_GENL_NAME
+	TASKSTATS_GENL_VERSION = C.TASKSTATS_GENL_VERSION
+	CGROUPSTATS_CMD_GET = C.CGROUPSTATS_CMD_GET
+	CGROUPSTATS_CMD_ATTR_FD = C.CGROUPSTATS_CMD_ATTR_FD
+	CGROUPSTATS_TYPE_CGROUP_STATS = C.CGROUPSTATS_TYPE_CGROUP_STATS
 )
diff --git a/utils/cpuload/netlink/netlink.go b/utils/cpuload/netlink/netlink.go
index 7ca05f3..accf294 100644
--- a/utils/cpuload/netlink/netlink.go
+++ b/utils/cpuload/netlink/netlink.go
@@ -23,16 +23,6 @@ import (
 	info "github.com/google/cadvisor/info/v1"
 )
 
-const (
-	// Kernel constants for tasks stats.
-	genlIdCtrl           = syscall.NLMSG_MIN_TYPE // GENL_ID_CTRL
-	taskstatsGenlName    = "TASKSTATS"            // TASKSTATS_GENL_NAME
-	cgroupStatsCmdAttrFd = 0x1                    // CGROUPSTATS_CMD_ATTR_FD
-	ctrlAttrFamilyId     = 0x1                    // CTRL_ATTR_FAMILY_ID
-	ctrlAttrFamilyName   = 0x2                    // CTRL_ATTR_FAMILY_NAME
-	ctrlCmdGetFamily     = 0x3                    // CTRL_CMD_GETFAMILY
-)
-
 var (
 	// TODO(rjnagal): Verify and fix for other architectures.
 	Endian = binary.LittleEndian
@@ -123,15 +113,15 @@ func prepareMessage(headerType uint16, cmd uint8, attributes []byte) (msg netlin
 // Prepares message to query family id for task stats.
 func prepareFamilyMessage() (msg netlinkMessage) {
 	buf := bytes.NewBuffer([]byte{})
-	addAttribute(buf, ctrlAttrFamilyName, taskstatsGenlName, len(taskstatsGenlName)+1)
-	return prepareMessage(genlIdCtrl, ctrlCmdGetFamily, buf.Bytes())
+	addAttribute(buf, CTRL_ATTR_FAMILY_NAME, TASKSTATS_GENL_NAME, len(TASKSTATS_GENL_NAME)+1)
+	return prepareMessage(GENL_ID_CTRL, CTRL_CMD_GETFAMILY, buf.Bytes())
 }
 
 // Prepares message to query task stats for a task group.
 func prepareCmdMessage(id uint16, cfd uintptr) (msg netlinkMessage) {
 	buf := bytes.NewBuffer([]byte{})
-	addAttribute(buf, cgroupStatsCmdAttrFd, uint32(cfd), 4)
-	return prepareMessage(id, __TASKSTATS_CMD_MAX+1, buf.Bytes())
+	addAttribute(buf, CGROUPSTATS_CMD_ATTR_FD, uint32(cfd), 4)
+	return prepareMessage(id, CGROUPSTATS_CMD_GET, buf.Bytes())
 }
 
 // Extracts returned family id from the response.
@@ -157,7 +147,7 @@ func parseFamilyResp(msg syscall.NetlinkMessage) (uint16, error) {
 		if err != nil {
 			return 0, err
 		}
-		if attr.Type == ctrlAttrFamilyId {
+		if attr.Type == CTRL_ATTR_FAMILY_ID {
 			err = binary.Read(buf, Endian, &id)
 			if err != nil {
 				return 0, err
diff --git a/utils/cpuload/netlink/reader.go b/utils/cpuload/netlink/reader.go
index 4e3aa68..9ed93f9 100644
--- a/utils/cpuload/netlink/reader.go
+++ b/utils/cpuload/netlink/reader.go
@@ -25,7 +25,6 @@ import (
 
 type NetlinkReader struct {
 	familyId uint16
-	conn     *Connection
 }
 
 func New() (*NetlinkReader, error) {
@@ -33,6 +32,7 @@ func New() (*NetlinkReader, error) {
 	if err != nil {
 		return nil, fmt.Errorf("failed to create a new connection: %s", err)
 	}
+	defer conn.Close()
 
 	id, err := getFamilyId(conn)
 	if err != nil {
@@ -41,14 +41,10 @@ func New() (*NetlinkReader, error) {
 	glog.V(4).Infof("Family id for taskstats: %d", id)
 	return &NetlinkReader{
 		familyId: id,
-		conn:     conn,
 	}, nil
 }
 
 func (self *NetlinkReader) Stop() {
-	if self.conn != nil {
-		self.conn.Close()
-	}
 }
 
 func (self *NetlinkReader) Start() error {
@@ -70,7 +66,13 @@ func (self *NetlinkReader) GetCpuLoad(name string, path string) (info.LoadStats,
 		return info.LoadStats{}, fmt.Errorf("failed to open cgroup path %s: %q", path, err)
 	}
 
-	stats, err := getLoadStats(self.familyId, cfd.Fd(), self.conn)
+	conn, err := newConnection()
+	if err != nil {
+		return info.LoadStats{}, fmt.Errorf("failed to create a new connection: %s", err)
+	}
+	defer conn.Close()
+
+	stats, err := getLoadStats(self.familyId, cfd.Fd(), conn)
 	if err != nil {
 		return info.LoadStats{}, err
 	}
