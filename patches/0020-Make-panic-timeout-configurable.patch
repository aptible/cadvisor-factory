From 4294dd05b9addb1dc44902947f1d3c997ed332a0 Mon Sep 17 00:00:00 2001
From: Thomas Orozco <thomas@orozco.fr>
Date: Tue, 12 Apr 2016 18:55:44 +0200
Subject: [PATCH] Make panic timeout configurable

---
 manager/container.go | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/manager/container.go b/manager/container.go
index 9ee2b53..1a4d7f3 100644
--- a/manager/container.go
+++ b/manager/container.go
@@ -44,11 +44,14 @@ import (
 )
 
 // Housekeeping interval.
-var enableLoadReader = flag.Bool("enable_load_reader", false, "Whether to enable cpu load reader")
 var HousekeepingInterval = flag.Duration("housekeeping_interval", 1*time.Second, "Interval between container housekeepings")
+
+var enableLoadReader = flag.Bool("enable_load_reader", false, "Whether to enable cpu load reader")
 var LoadreaderInterval = flag.Duration("load_reader_interval", 1*time.Second, "Interval between load reader probes")
 var MaxLoadReaderInterval = flag.Duration("max_load_reader_interval", 60*time.Second, "Interval between load reader probes")
 
+var PanicTimeout = flag.Duration("panic_timeout", 1*time.Minute, "Delay after which cAdvisor should panic if housekeeping or LA probe hasn't completed")
+
 var cgroupPathRegExp = regexp.MustCompile(`devices[^:]*:(.*?)[,;$]`)
 
 type containerInfo struct {
@@ -435,7 +438,7 @@ func (c *containerData) doHousekeepingLoop() {
 		default:
 			// Perform housekeeping.
 			start := time.Now()
-			c.doWithTimeout((*containerData).updateStats, (*HousekeepingInterval)*2)
+			c.doWithTimeout((*containerData).updateStats, *PanicTimeout)
 
 			// Log if housekeeping took too long.
 			duration := time.Since(start)
@@ -610,7 +613,7 @@ func (c *containerData) doLoadReaderLoop() {
 		case <-c.loadStop:
 			return
 		default:
-			c.doWithTimeout((*containerData).doLoadReaderIteration, (*LoadreaderInterval)*2)
+			c.doWithTimeout((*containerData).doLoadReaderIteration, *PanicTimeout)
 		}
 
 		// Schedule the next housekeeping. Sleep until that time.
-- 
2.7.4

